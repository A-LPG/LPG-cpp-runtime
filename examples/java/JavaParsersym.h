//
// This is the grammar specification from the Final Draft of the generic spec.
//
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007 IBM Corporation.
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the Eclipse Public License v1.0
// which accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v10.html
//
//Contributors:
//    Philippe Charles (pcharles@us.ibm.com) - initial API and implementation

////////////////////////////////////////////////////////////////////////////////

#pragma once
 #include <vector>
#include<string>
  struct JavaParsersym {
     typedef  unsigned char byte;
      static constexpr int
      TK_ClassBodyDeclarationsoptMarker = 102,
      TK_LPGUserActionMarker = 103,
      TK_IntegerLiteral = 32,
      TK_LongLiteral = 33,
      TK_FloatingPointLiteral = 34,
      TK_DoubleLiteral = 35,
      TK_CharacterLiteral = 36,
      TK_StringLiteral = 37,
      TK_MINUS_MINUS = 27,
      TK_OR = 85,
      TK_MINUS = 45,
      TK_MINUS_EQUAL = 71,
      TK_NOT = 49,
      TK_NOT_EQUAL = 86,
      TK_REMAINDER = 87,
      TK_REMAINDER_EQUAL = 72,
      TK_AND = 67,
      TK_AND_AND = 88,
      TK_AND_EQUAL = 73,
      TK_LPAREN = 3,
      TK_RPAREN = 20,
      TK_MULTIPLY = 68,
      TK_MULTIPLY_EQUAL = 74,
      TK_COMMA = 44,
      TK_DOT = 42,
      TK_DIVIDE = 89,
      TK_DIVIDE_EQUAL = 75,
      TK_COLON = 51,
      TK_SEMICOLON = 12,
      TK_QUESTION = 90,
      TK_AT = 2,
      TK_LBRACKET = 24,
      TK_RBRACKET = 53,
      TK_XOR = 91,
      TK_XOR_EQUAL = 76,
      TK_LBRACE = 28,
      TK_OR_OR = 94,
      TK_OR_EQUAL = 77,
      TK_RBRACE = 46,
      TK_TWIDDLE = 50,
      TK_PLUS = 47,
      TK_PLUS_PLUS = 29,
      TK_PLUS_EQUAL = 78,
      TK_LESS = 23,
      TK_LEFT_SHIFT = 69,
      TK_LEFT_SHIFT_EQUAL = 79,
      TK_LESS_EQUAL = 80,
      TK_EQUAL = 48,
      TK_EQUAL_EQUAL = 92,
      TK_GREATER = 25,
      TK_GREATER_EQUAL = 112,
      TK_RIGHT_SHIFT = 113,
      TK_RIGHT_SHIFT_EQUAL = 114,
      TK_UNSIGNED_RIGHT_SHIFT = 115,
      TK_UNSIGNED_RIGHT_SHIFT_EQUAL = 116,
      TK_ELLIPSIS = 96,
      TK_BeginAction = 104,
      TK_EndAction = 105,
      TK_BeginJava = 106,
      TK_EndJava = 107,
      TK_NoAction = 108,
      TK_NullAction = 109,
      TK_BadAction = 110,
      TK_abstract = 17,
      TK_assert = 57,
      TK_boolean = 4,
      TK_break = 58,
      TK_byte = 5,
      TK_case = 81,
      TK_catch = 97,
      TK_char = 6,
      TK_class = 38,
      TK_const = 117,
      TK_continue = 59,
      TK_default = 70,
      TK_do = 60,
      TK_double = 7,
      TK_enum = 43,
      TK_else = 95,
      TK_extends = 93,
      TK_false = 39,
      TK_final = 19,
      TK_finally = 98,
      TK_float = 8,
      TK_for = 61,
      TK_goto = 118,
      TK_if = 62,
      TK_implements = 111,
      TK_import = 99,
      TK_instanceof = 82,
      TK_int = 9,
      TK_interface = 22,
      TK_long = 10,
      TK_native = 83,
      TK_new = 30,
      TK_null = 40,
      TK_package = 100,
      TK_private = 14,
      TK_protected = 15,
      TK_public = 13,
      TK_return = 63,
      TK_short = 11,
      TK_static = 16,
      TK_strictfp = 18,
      TK_super = 26,
      TK_switch = 64,
      TK_synchronized = 52,
      TK_this = 31,
      TK_throw = 65,
      TK_throws = 101,
      TK_transient = 54,
      TK_true = 41,
      TK_try = 66,
      TK_void = 21,
      TK_volatile = 55,
      TK_while = 56,
      TK_EOF_TOKEN = 84,
      TK_IDENTIFIER = 1,
      TK_ERROR_TOKEN = 119;

      inline const static std::vector<std::wstring> orderedTerminalSymbols = {
                 L"",
                 L"IDENTIFIER",
                 L"AT",
                 L"LPAREN",
                 L"boolean",
                 L"byte",
                 L"char",
                 L"double",
                 L"float",
                 L"int",
                 L"long",
                 L"short",
                 L"SEMICOLON",
                 L"public",
                 L"private",
                 L"protected",
                 L"static",
                 L"abstract",
                 L"strictfp",
                 L"final",
                 L"RPAREN",
                 L"void",
                 L"interface",
                 L"LESS",
                 L"LBRACKET",
                 L"GREATER",
                 L"super",
                 L"MINUS_MINUS",
                 L"LBRACE",
                 L"PLUS_PLUS",
                 L"new",
                 L"this",
                 L"IntegerLiteral",
                 L"LongLiteral",
                 L"FloatingPointLiteral",
                 L"DoubleLiteral",
                 L"CharacterLiteral",
                 L"StringLiteral",
                 L"class",
                 L"false",
                 L"null",
                 L"true",
                 L"DOT",
                 L"enum",
                 L"COMMA",
                 L"MINUS",
                 L"RBRACE",
                 L"PLUS",
                 L"EQUAL",
                 L"NOT",
                 L"TWIDDLE",
                 L"COLON",
                 L"synchronized",
                 L"RBRACKET",
                 L"transient",
                 L"volatile",
                 L"while",
                 L"assert",
                 L"break",
                 L"continue",
                 L"do",
                 L"for",
                 L"if",
                 L"return",
                 L"switch",
                 L"throw",
                 L"try",
                 L"AND",
                 L"MULTIPLY",
                 L"LEFT_SHIFT",
                 L"default",
                 L"MINUS_EQUAL",
                 L"REMAINDER_EQUAL",
                 L"AND_EQUAL",
                 L"MULTIPLY_EQUAL",
                 L"DIVIDE_EQUAL",
                 L"XOR_EQUAL",
                 L"OR_EQUAL",
                 L"PLUS_EQUAL",
                 L"LEFT_SHIFT_EQUAL",
                 L"LESS_EQUAL",
                 L"case",
                 L"instanceof",
                 L"native",
                 L"EOF_TOKEN",
                 L"OR",
                 L"NOT_EQUAL",
                 L"REMAINDER",
                 L"AND_AND",
                 L"DIVIDE",
                 L"QUESTION",
                 L"XOR",
                 L"EQUAL_EQUAL",
                 L"extends",
                 L"OR_OR",
                 L"else",
                 L"ELLIPSIS",
                 L"catch",
                 L"finally",
                 L"import",
                 L"package",
                 L"throws",
                 L"ClassBodyDeclarationsoptMarker",
                 L"LPGUserActionMarker",
                 L"BeginAction",
                 L"EndAction",
                 L"BeginJava",
                 L"EndJava",
                 L"NoAction",
                 L"NullAction",
                 L"BadAction",
                 L"implements",
                 L"GREATER_EQUAL",
                 L"RIGHT_SHIFT",
                 L"RIGHT_SHIFT_EQUAL",
                 L"UNSIGNED_RIGHT_SHIFT",
                 L"UNSIGNED_RIGHT_SHIFT_EQUAL",
                 L"const",
                 L"goto",
                 L"ERROR_TOKEN"
             };

     static constexpr  int numTokenKinds = 120;
     static constexpr  bool isValidForParser = true;
};
